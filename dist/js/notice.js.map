{"version":3,"sources":["notice.js"],"names":["$","showNotice","instance","newInstance","addClass","opt","id","Date","B","append","tpl","data","each","index","el","that","cb","event","preventDefault","pager","current","dataList","action","footer","total","laterIcon","callback","type","title","desc","read","initData","dl","this","push","length","getData","prev","next","close","setTimeout","remove","types","forEach","prop","notice","refresh","newDl","add","newNotice","unshift","jQuery"],"mappings":"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","file":"notice.js","sourcesContent":["(function($) {\r\n    // 默认配置\r\n    let opt = {\r\n            id: '',\r\n            // 弹窗样式\r\n            type: 'default',\r\n            data: '',\r\n            dataList: [],\r\n            // 回调函数，用户自定义\r\n            callback: {\r\n                read: function() {},\r\n                later: null,\r\n                readAll: function() {},\r\n            },\r\n            // 分页\r\n            pager: {\r\n                current: 1,\r\n                total: 1\r\n            },\r\n            // 初始化数据\r\n            initData: function(dl) {\r\n                if ($.type(dl) == 'array') {\r\n                    // 如果传入的是数组，则进行分页\r\n                    this.dataList = dl\r\n                } else {\r\n                    this.dataList = []\r\n                    this.dataList.push(dl)\r\n                }\r\n                this.pager.total = this.dataList.length\r\n                this.getData(1)\r\n            },\r\n            // 根据页码获取数据\r\n            getData: function(index) {\r\n                this.data = this.dataList[index - 1]\r\n                this.pager.current = index\r\n            },\r\n            // 上一页\r\n            prev: function() {\r\n                var index = this.pager.current\r\n                if (index > 1) {\r\n                    this.getData(index - 1)\r\n                    showNotice()\r\n                }\r\n            },\r\n            // 下一页\r\n            next: function() {\r\n                var index = this.pager.current\r\n                if (index < this.pager.total) {\r\n                    this.getData(index + 1)\r\n                    showNotice()\r\n                }\r\n            },\r\n            // 关闭弹窗\r\n            close: function(cb) {\r\n                instance.addClass('slideOutRight')\r\n                setTimeout(function() {\r\n                    opt.remove()\r\n                    if (cb) cb()\r\n                }, 500)\r\n            },\r\n            remove: function() {\r\n                instance.remove()\r\n                instance = null\r\n            }\r\n        },\r\n        B = $('body'),\r\n        instance = null\r\n\r\n    // 显示弹窗\r\n    function showNotice() {\r\n        if (instance) {\r\n            // 当前有弹窗的，先移除当前的再显示新的\r\n            opt.remove()\r\n            newInstance()\r\n        } else {\r\n            // 第一次进入，有入场动画\r\n            newInstance()\r\n            instance.addClass('slideInRight')\r\n        }\r\n    }\r\n\r\n    // 实例方法\r\n    function newInstance() {\r\n        // 给唯一id\r\n        opt.id = 'notice' + (-new Date())\r\n\r\n        // 添加到body中\r\n        B.append(tpl(opt.data))\r\n\r\n        // 获取实例\r\n        instance = $('#' + opt.id)\r\n\r\n        // 绑定回调\r\n        $('[data-cb]', instance).each(function(index, el) {\r\n            var that = $(el),\r\n                cb = that.data('cb')\r\n            that.on('click', function(event) {\r\n                // 返回当前数据，总数组，当前索引\r\n                event.preventDefault()\r\n                var index = opt.pager.current - 1\r\n                opt.callback[cb](opt.data, opt.dataList, index)\r\n            })\r\n        })\r\n\r\n        // 绑定事件\r\n        $('[data-action]', instance).each(function(index, el) {\r\n            var that = $(el),\r\n                action = that.data('action')\r\n            that.on('click', function(event) {\r\n                event.preventDefault()\r\n                opt[action]()\r\n            })\r\n        })\r\n    }\r\n\r\n    // 模板方法\r\n    function tpl(data) {\r\n        var footer = ''\r\n        if (opt.pager.total > 1) {\r\n            // 总数大于1时显示分页\r\n            footer = `<div class=\"fs-notice-footer fs-cf\">\r\n                        <div class=\"fs-fl\">\r\n                            <i class=\"iconfont icon-check\" data-cb=\"readAll\">全部标记为已读</i>\r\n                        </div>\r\n                        <div class=\"fs-fr fs-noselect\">\r\n                            <i class=\"iconfont icon-arrow-left\" title=\"上一条\" data-action=\"prev\"></i>\r\n                            ${opt.pager.current}/${opt.pager.total}\r\n                            <i class=\"iconfont icon-arrow-right\" title=\"下一条\" data-action=\"next\"></i>\r\n                        </div>\r\n                    </div>`\r\n        }\r\n        var laterIcon = ''\r\n        if (opt.callback.later) {\r\n            laterIcon = `<i class=\"iconfont icon-time\" title=\"稍后处理\" data-cb=\"later\"></i>`\r\n        }\r\n        return `<div class=\"fs-notice-wrapper fs-notice-${opt.type}\" id=\"${opt.id}\">\r\n                    <div class=\"fs-notice-header\">\r\n                        <div class=\"fs-notice-title\">\r\n                            <span data-cb=\"read\">${data.title}</span>\r\n                        </div>\r\n                        <div class=\"fs-notice-actions\">\r\n                            ${laterIcon}\r\n                            <i class=\"iconfont icon-close\" title=\"关闭\" data-action=\"close\"></i>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"fs-notice-body\">\r\n                        <div class=\"fs-notice-custom-body\">${data.desc}</div>\r\n                    </div>\r\n                    ${footer}\r\n                </div>`\r\n    }\r\n\r\n    // 主方法\r\n    $.notice = function(dataList, callback, type) {\r\n        // 同时只能有一个弹窗实例\r\n        if (instance) return\r\n\r\n        // 初始化数据\r\n        opt.initData(dataList)\r\n\r\n        //使用传入的回调方法\r\n        for (var prop in callback) {\r\n            opt.callback[prop] = callback[prop]\r\n        }\r\n        // 主题配色\r\n        opt.type = type ? type : 'default'\r\n\r\n        // 显示弹窗\r\n        showNotice(type)\r\n    }\r\n\r\n    // 关闭方法\r\n    $.notice.close = function() {\r\n        if (!instance) return\r\n        opt.close()\r\n    }\r\n\r\n    // 不同颜色边边\r\n    var types = ['info', 'success', 'warning', 'error']\r\n    types.forEach(function(type) {\r\n        // 可以通过$.notice.info等调用\r\n        $.notice[type] = function(dataList, callback) {\r\n            return $.notice(dataList, callback, type)\r\n        }\r\n    })\r\n\r\n    // 添加提醒数据\r\n    $.notice.add = function(newNotice) {\r\n        opt.dataList.unshift(newNotice)\r\n        $.notice.refresh(opt.dataList)\r\n    }\r\n\r\n    // 刷新提醒数据\r\n    $.notice.refresh = function(newDl) {\r\n        if (newDl.length < 1 || !newDl) {\r\n            $.notice.close()\r\n        } else {\r\n            opt.initData(newDl)\r\n            showNotice()\r\n        }\r\n    }\r\n\r\n}(jQuery))\r\n"]}